// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var CountrySuggestion = require("./CountrySuggestion.bs.js");

function esReqBody(q) {
  return {
          query: {
            multi_match: {
              query: q,
              type: "bool_prefix",
              fields: [
                "label",
                "value",
                "label._2gram",
                "value._2gram",
                "label._3gram",
                "value._3gram"
              ]
            }
          }
        };
}

function CountrySelect(Props) {
  var match = React.useState(function () {
        return "";
      });
  var setQuery = match[1];
  var query = match[0];
  var match$1 = React.useState(function () {
        return [];
      });
  var setSearchResult = match$1[1];
  var match$2 = React.useState(function () {
        return [];
      });
  var setAllCountries = match$2[1];
  var match$3 = React.useState(function () {
        return "";
      });
  var setSelectedCountry = match$3[1];
  var match$4 = React.useState(function () {
        return "";
      });
  var setSelectedCountryLabel = match$4[1];
  var onChange = function (evt) {
    evt.preventDefault();
    var value = evt.target.value;
    Curry._1(setQuery, (function (_prev) {
            return value;
          }));
    var esReq = new XMLHttpRequest();
    esReq.addEventListener("load", (function (param) {
            var response = JSON.parse(esReq.response);
            if (response.hits.hits.length === 0) {
              return ;
            }
            var clist = Belt_Array.map(response.hits.hits, (function (x) {
                    return {
                            id: String(x._source.ID),
                            label: x._source.label,
                            value: x._source.value
                          };
                  }));
            return Curry._1(setSearchResult, (function (_prev) {
                          return clist;
                        }));
          }));
    esReq.addEventListener("error", (function (param) {
            console.log("Error logging here esreq");
            
          }));
    esReq.open("POST", "http://localhost:9200/country/_search");
    esReq.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    esReq.send(JSON.stringify(esReqBody(query)));
    
  };
  var countryReq = new XMLHttpRequest();
  countryReq.addEventListener("load", (function (param) {
          var response = JSON.parse(countryReq.response);
          var allCountries = Belt_Array.map(response, (function (x) {
                  return {
                          id: String(x.ID),
                          label: x.label,
                          value: x.value
                        };
                }));
          return Curry._1(setAllCountries, (function (_prev) {
                        return allCountries;
                      }));
        }));
  countryReq.addEventListener("error", (function (param) {
          console.log("Error logging here countryReq");
          
        }));
  countryReq.open("GET", "http://localhost:8080/countries");
  countryReq.send();
  var allCountriesOptions = Belt_Array.map(match$2[0], (function (country) {
          return React.createElement("option", {
                      key: country.id,
                      value: country.value
                    }, country.label);
        }));
  var callbackFunc = function (selectedCountry, selectedCountryLabel) {
    Curry._1(setSelectedCountry, (function (_prev) {
            return selectedCountry;
          }));
    return Curry._1(setSelectedCountryLabel, (function (_prev) {
                  return selectedCountryLabel;
                }));
  };
  return React.createElement("div", {
              className: "container centered"
            }, React.createElement("form", undefined, React.createElement("div", {
                      className: "row"
                    }, React.createElement("div", {
                          className: "one-third column title-centered"
                        }, React.createElement("select", {
                              id: "exampleRecipientInput"
                            }, React.createElement("option", {
                                  value: match$3[0]
                                }, match$4[0]), allCountriesOptions))), React.createElement("div", {
                      className: "row"
                    }, React.createElement("div", {
                          className: "input-icons autocomplete one-third column"
                        }, React.createElement("i", {
                              className: "bi-search icon"
                            }), React.createElement("input", {
                              className: "input-field",
                              id: "myInput",
                              placeholder: "Search",
                              type: "text",
                              value: query,
                              onKeyDown: (function ($$event) {
                                  var key = $$event.key;
                                  switch (key) {
                                    case "ArrowDown" :
                                        console.log("2");
                                        return ;
                                    case "ArrowUp" :
                                        console.log("1");
                                        return ;
                                    default:
                                      return ;
                                  }
                                }),
                              onChange: onChange
                            }), React.createElement(CountrySuggestion.make, {
                              results: match$1[0],
                              clickedValue: callbackFunc
                            })))));
}

var make = CountrySelect;

exports.esReqBody = esReqBody;
exports.make = make;
/* react Not a pure module */
